// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3543.Team3543Robot.commands;
import edu.wpi.first.wpilibj.command.Command;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.usfirst.frc3543.Team3543Robot.Robot;
import org.usfirst.frc3543.Team3543Robot.Settings;

/**
 *
 */
public class AutonomousCommand extends Command {
	public static final String MODE_NONE = "none";
	public static final String MODE_LEFT = "left";
	public static final String MODE_RIGHT = "right";
	public static final String MODE_MIDDLE = "middle";
	
	String mode = MODE_NONE;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveLine);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	mode = Settings.get("AutonomousMode", "none");
    	// should be a method called "mode_XXX" where XXX is the setting in robot.properties    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (mode.equals(MODE_NONE)) {
    		mode_none();
    	}
    	else if (mode.equals(MODE_LEFT)) {
    		mode_left();
    	}
    	else if (mode.equals(MODE_RIGHT)) {    		
    		mode_right();
    	}
    	else if (mode.equals(MODE_MIDDLE)) {
    		mode_middle();
    	}
    	else {
    		System.err.println("Unknown mode "+mode);
    	}    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
    
    // Various modes
    void mode_none() {
    	
    }

    void mode_left() {
    	// TODO - fill me in
    }
    
    void mode_right() {
    	// TODO - fill me in
    }

    void mode_middle() {
    	// TODO - fill me in
    }
}
